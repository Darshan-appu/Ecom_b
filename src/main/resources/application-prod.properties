# --- Server Configuration ---
server.port=8080
# The port your application will run on. Render detects this automatically.

# --- Spring Data Source (Database) Configuration ---
# Your MySQL database connection details.
# It's highly recommended to use environment variables for sensitive info in production.
# For local testing, you can put the values directly.
# Replace DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME with your actual values or env var names.
# Example for a Java/Spring Boot application
spring.datasource.url=jdbc:mysql://interchange.proxy.rlwy.net:53948/railway
spring.datasource.username=root
spring.datasource.password=hYFIpezjBaqwOHWwfnIYlhHdZCkeFUhd
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# --- JPA (Hibernate) Configuration ---
# This addresses the "Table 'railway.roles' doesn't exist" error during development.
# IMPORTANT: For production, consider using 'validate' or 'none' with Flyway/Liquibase for schema management.
spring.jpa.hibernate.ddl-auto=create
# 'update': Hibernate will try to update the schema based on your entities. Useful for dev.
# 'create': Creates schema on startup, drops on shutdown. Useful for testing.
# 'create-drop': Creates schema on startup, drops on shutdown. Useful for testing.
# 'validate': Checks that the schema matches entities, throws error if not. Good for prod.
# 'none': Does nothing with the schema. Requires manual schema management (e.g., Flyway/Liquibase).

# This addresses the "spring.jpa.open-in-view is enabled by default" warning.
# Setting it to false is generally recommended for REST APIs to avoid LazyInitializationException
# and to manage transactions more explicitly.
spring.jpa.open-in-view=false

# Show SQL queries in console (useful for debugging)
spring.jpa.show-sql=true
# Format the SQL queries for better readability
spring.jpa.properties.hibernate.format_sql=true

# --- Thymeleaf Configuration (Based on your logs) ---
# This addresses the "Cannot find template location: classpath:/templates/" warning.
# If your application is a pure REST API and doesn't serve HTML templates, you can set this to false.
spring.thymeleaf.check-template-location=false
# If you are serving HTML, ensure your templates are in src/main/resources/templates/

# --- Logging Configuration ---
# Example: Set logging level for specific packages or the root.
# logging.level.root=INFO
# logging.level.org.hibernate.SQL=DEBUG # To see full SQL parameters
# logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE # To see bound parameters

# --- Spring Security Warnings (For your information from logs) ---
# The warning "Global AuthenticationManager configured with an AuthenticationProvider bean..."
# is a warning about how Spring Security is auto-configuring. It's not typically resolved
# via application.properties, but by adjusting your Spring Security configuration classes.
# If you intentionally have a custom AuthenticationProvider, you can safely ignore this warning
# or adjust its logging level as suggested in the log to ERROR.
# logging.level.org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer=ERROR